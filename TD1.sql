/* Etape 1 */
/* Q1 */
SELECT COLUMN_NAME FROM USER_TAB_COLUMNS WHERE TABLE_NAME = 'PROF';

/* Q2 */
/*
SELECT OBJECT_NAME 
FROM USER_OBJECTS 
WHERE OBJECT_TYPE = 'FUNCTION' OR OBJECT_TYPE = 'PROCEDURE' OR OBJECT_TYPE = 'TABLE';
*/
SELECT OBJECT_NAME 
FROM USER_OBJECTS 
WHERE OBJECT_TYPE IN('FUNCTION', 'PROCEDURE', 'TABLE');

/* Q3 */
SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS;

/* Q4 */
SELECT CONSTRAINT_NAME FROM USER_CONSTRAINTS 
WHERE TABLE_NAME IN (SELECT TABLE_NAME FROM USER_TAB_COLUMNS WHERE DATA_TYPE = 'NUMBER');

/* Q5 */
SELECT DISTINCT CC.CONSTRAINT_NAME, CC.COLUMN_NAME, DATA_TYPE 
FROM USER_CONS_COLUMNS CC, USER_TAB_COLUMNS ATT
WHERE ATT.TABLE_NAME = CC.TABLE_NAME AND ATT.COLUMN_NAME = CC.COLUMN_NAME AND DATA_TYPE = 'NUMBER';

/* Q6 */
SELECT CI. CONSTRAINT_NAME, CI.COLUMN_NAME, DATA_TYPE
FROM USER_CONS_COLUMNS CI, USER_TAB_COLUMNS ATT
WHERE CI.COLUMN_NAME = ATT.COLUMN_NAME
      AND CI.TABLE_NAME = ATT.TABLE_NAME
      AND CI.TABLE_NAME IN ( SELECT TABLE_NAME FROM USER_TAB_COLUMNS
                             WHERE DATA_TYPE = 'NUMBER');

/* Q7 */
SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE FROM USER_CONSTRAINTS;

/* Q8 */
SELECT AT1.COLUMN_NAME, AT1.TABLE_NAME, AT2.COLUMN_NAME, AT2.TABLE_NAME
FROM USER_TAB_COLUMNS AT1, USER_TAB_COLUMNS AT2
WHERE AT1.COLUMN_NAME = AT2.COLUMN_NAME AND
      AT1.TABLE_NAME <> AT2.TABLE_NAME;
      
/* Q9 */
SELECT AT1.COLUMN_NAME, AT1.TABLE_NAME, AT2.COLUMN_NAME, AT2.TABLE_NAME
FROM USER_TAB_COLUMNS AT1, USER_TAB_COLUMNS AT2
WHERE AT1.COLUMN_NAME = AT2.COLUMN_NAME AND
      AT1.TABLE_NAME < AT2.TABLE_NAME;
      
      
/* Etape 2 */
/* Q10 */
CREATE VIEW PROF_INFO2 (NUM, NOM, PROF) AS
    SELECT PROF.NUM_PROF, NOM_PROF,PRENOM_PROF
    FROM PROF, ENSEIGNT, ETUDIANT
    WHERE PROF.NUM_PROF = ENSEIGNT.NUM_PROF AND ENSEIGNT.NUM_ET = ETUDIANT.NUM_ET AND ANNEE = 2;
    
SELECT DISTINCT * FROM PROF_INFO2;

/* Q11 */
CREATE VIEW MACHIN AS
SELECT * FROM MODULE WHERE DISCIPLINE IN ('INFORMATIQUE', 'GESTION', 'MATH') WITH CHECK OPTION;

/* Q12 */
CREATE VIEW MAT AS
    SELECT * FROM MODULE M
    WHERE (CODE,RESP) IN (SELECT CODE, NUM_PROF
                          FROM ENSEIGNT)
    WITH CHECK OPTION;

SELECT DISTINCT * FROM MAT;

/* Q13 */
CREATE VIEW  ENS AS
SELECT * FROM ENSEIGNT
WHERE CODE IN (SELECT CODE FROM MODULE) AND NUM_ET IN (SELECT NUM_ET FROM ETUDIANT) AND NUM_PROF IN (SELECT NUM_PROF FROM PROF)
WITH CHECK OPTION;

/* Q14 */
CREATE VIEW  SUPPRMODULE AS
SELECT * FROM MODULE M
WHERE M.CODE NOT IN (SELECT CODE FROM ENSEIGNT) AND 
      M.CODEPERE NOT IN (SELECT M2.CODE FROM MODULE M2)
WITH CHECK OPTION;

/* Etape 3 */
/* Q15 */
GRANT SELECT
ON ETUDIANT
TO PUBLIC;

/* Q16 */
/* PAS PU LE FAIRE */

/* Q17 */
GRANT SELECT, UPDATE
ON PROF
TO /* USERNAME */;

SELECT * FROM PROF;

/* Etape 4 */
/* Q18 */
/* Curseur declaré */
DECLARE
    CURSOR code_libelle IS SELECT CODE, LIBELLE FROM MODULE WHERE CODE NOT IN (SELECT CODEPERE FROM MODULE WHERE CODEPERE IS NOT NULL);
    aucune_matiere EXCEPTION;
    trouver BOOLEAN := FALSE;
BEGIN
    
    FOR cl IN code_libelle LOOP
        trouver := TRUE;
        DBMS_OUTPUT.PUT_LINE('Le libelle de la matiere est '||cl.LIBELLE||' et son code est '||cl.CODE);
        EXIT WHEN code_libelle%NOTFOUND;
    END LOOP;
    IF NOT trouver THEN RAISE aucune_matiere;
    END IF;
    
EXCEPTION
    WHEN aucune_matiere THEN
        DBMS_OUTPUT.PUT_LINE('pas de matiere');
END;

/* Curseur non declaré */
DECLARE
    aucune_matiere EXCEPTION;
    trouver BOOLEAN := FALSE;
BEGIN
    
    FOR cl IN (SELECT CODE, LIBELLE FROM MODULE WHERE CODE NOT IN (SELECT CODEPERE FROM MODULE WHERE CODEPERE IS NOT NULL)) LOOP
        trouver := TRUE;
        DBMS_OUTPUT.PUT_LINE('Le libelle de la matiere est '||cl.LIBELLE||' et son code est '||cl.CODE);
    END LOOP;
    IF NOT trouver THEN RAISE aucune_matiere;
    END IF;
    
EXCEPTION
    WHEN aucune_matiere THEN
        DBMS_OUTPUT.PUT_LINE('pas de matiere');
END;

/* Q19 */
CREATE TABLE GROUPE (NUMERO NUMBER(1,0), EFFECTIF NUMBER(3,0), CONSTRAINT CP_GROUPE PRIMARY KEY (NUMERO));

DECLARE
    eff_calcule GROUPE.EFFECTIF%TYPE;
    nb_groupe NUMBER(1,0);
    aucun_etudiant EXCEPTION;

BEGIN 
    COMMIT;
    SELECT COUNT(DISTINCT GROUPE) INTO nb_groupe FROM ETUDIANT WHERE ANNEE = 2;
    IF nb_groupe=0 THEN RAISE aucun_etudiant; END IF;
    FOR i IN 1..nb_groupe LOOP
        SELECT COUNT(*) INTO eff_calcule FROM ETUDIANT WHERE GROUPE = i AND ANNEE = 2;
        INSERT INTO GROUPE VALUES (i, eff_calcule);
    END LOOP;
    COMMIT;
EXCEPTION
    WHEN aucun_etudiant THEN
        DBMS_OUTPUT.PUT_LINE('aucun etudiant');
END;

SELECT * FROM GROUPE;